{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "defaultValue": "ida",
      "metadata": {
        "description": "Prefix for all resources created by this template"
      }
    },
    "hostingPlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "The pricing tier for the App Service plan"
      }
    },
    "searchServiceSku": {
      "type": "string",
      "defaultValue": "basic",
      "allowedValues": [
        "free",
        "basic",
        "standard",
        "standard2",
        "standard3"
      ],
      "metadata": {
        "description": "The SKU of the search service you want to create"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "functionsPackageUrl": {
      "type": "string",
      "defaultValue": "https://github.com/DerekHackett/azure-search-knowledge-mining/raw/Setup/industry-solutions/journalism/projectida/idapackagesIda.Core.Functions.zip",
      "metadata": {
        "description": "The URL to the functions package as a zip"
      }
    },
    "skillsFunctionsPackageUrl": {
      "type": "string",
      "defaultValue": "https://github.com/DerekHackett/azure-search-knowledge-mining/raw/Setup/industry-solutions/journalism/projectida/idapackages/IdaSkills.zip",
      "metadata": {
        "description": "The URL to the skills functions package as a zip"
      }
    }
  },
  "variables": {
    "websiteName": "[concat(parameters('resourcePrefix'), '-site-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "appConfigurationName": "[concat(parameters('resourcePrefix'), '-config-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "storageAccountName": "[concat(parameters('resourcePrefix'), 'storage', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "searchServiceName": "[concat(parameters('resourcePrefix'), '-search-service-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "hostingPlanName": "[concat(parameters('resourcePrefix'), '-plan-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "linuxHostingPlanName": "[concat(parameters('resourcePrefix'), '-linux-plan-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "functionAppName": "[concat(parameters('resourcePrefix'), '-functions-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "aiModelFunctionAppName": "[concat(parameters('resourcePrefix'), '-ai-functions-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "skillsFunctionAppName": "[concat(parameters('resourcePrefix'), '-skills-functions-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "cognitiveServicesAccountName": "[concat(parameters('resourcePrefix'), '-cognitive-services-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "customVisionPredictionName": "[concat(parameters('resourcePrefix'), '-vision-prediction-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "customVisionTrainingName": "[concat(parameters('resourcePrefix'), '-vision-training-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "eventGridDomainName": "[concat(parameters('resourcePrefix'), '-grid-domain-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "sqlserverName": "[concat(parameters('resourcePrefix'), '-sql-server-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "databaseName": "[concat(parameters('resourcePrefix'), '-core')]",
    "insightsName": "[concat(parameters('resourcePrefix'), '-insights-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "mapsName": "[concat(parameters('resourcePrefix'), '-maps-', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "videoIndexerName": "[concat(parameters('resourcePrefix'), 'mediaservices', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "sqlConnectorName": "[concat('sql_connector', '_', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "o365ConnectorName": "[concat('o365_connector', '_', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "eventgridConnection": "[concat('eventgrid_connector', '_', take(uniqueString(resourceGroup().id, deployment().name), 4))]",
    "invitationExpirationFunction": {
      "name": "StartInvitationExpirationProcess",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartInvitationExpirationProcess&code=')]"
    },
    "stopInvitationExpirationFunction": {
      "name": "StopInvitationExpirationTimer",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StopInvitationExpirationTimer&code=')]"
    },
    "completeInvitationFunction": {
      "name": "CompleteInvitation",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=CompleteInvitation&code=')]"
    },
    "startDatasetDeleteFunction": {
      "name": "StartDataSetDelete",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartDataSetDelete&code=')]"
    },
    "startPreprocessFunction": {
      "name": "StartPreProcess",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartPreProcess&code=')]"
    },
    "startIndexerFunction": {
      "name": "StartIndexer",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartIndexer&code=')]"
    },
    "startIndexDeleteFunction": {
      "name": "StartImportBatchIndexDelete",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartImportBatchIndexDelete&code=')]"
    },
    "startBlobDeleteFunction": {
      "name": "StartImportBatchDeleteBlob",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartImportBatchDeleteBlob&code=')]"
    },
    "startImportBatchRemoveFunction": {
      "name": "StartImportBatchRemoveFunction",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartImportBatchRemoveFunction&code=')]"
    },
    "datasetDeleteImportBatchFunction": {
      "name": "DataSetDeleteImportBatcListener",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=DataSetDeleteImportBatcListener&code=')]"
    },
    "startCopyFunction": {
      "name": "StartCopyImport",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartCopyImport&code=')]"
    },
    "startVideoProcessingFunction": {
      "name": "StartVideoIndexing",
      "url": "[concat('https://', variables('functionAppName'),'.azurewebsites.net/runtime/webhooks/eventgrid?functionName=StartVideoIndexing&code=')]"
    },
    "functionsHostKey": "[guid(resourceGroup().id, deployment().name, 'functions')]"
  },
  "resources": [
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2019-02-01-preview",
      "name": "[variables('appConfigurationName')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "type": "Microsoft.Maps/accounts",
      "apiVersion": "2018-05-01",
      "name": "[variables('mapsName')]",
      "location": "global",
      "sku": {
        "name": "s0"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('insightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('sqlserverName')]",
      "location": "[resourceGroup().location]",
      "kind": "v12.0",
      "properties": {
        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllMicrosoftAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAll",
          "properties": {
            "endIpAddress": "255.255.255.255",
            "startIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "databases",
          "apiVersion": "2017-03-01-preview",
          "name": "[variables('databaseName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
          ],
          "sku": {
            "name": "S1",
            "tier": "Standard"
          },
          "kind": "v12.0,user",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": 268435456000,
            "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
            "zoneRedundant": false
          },
          "resources": [
            {
              "comments": "Transparent Data Encryption",
              "name": "[concat(variables('sqlserverName'), '/', variables('databaseName'), '/current')]",
              "type": "Microsoft.Sql/servers/databases/transparentDataEncryption",
              "apiVersion": "2014-04-01-preview",
              "properties": {
                "status": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', variables('sqlserverName'), variables('databaseName'))]",
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-08-19",
      "name": "[variables('searchServiceName')]",
      "type": "Microsoft.Search/searchServices",
      "location": "[resourceGroup().location]",
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      },
      "sku": {
        "name": "[parameters('searchServiceSku')]"
      }
    },
    {
      "name": "[variables('cognitiveServicesAccountName')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "sku": {
        "name": "S0"
      },
      "kind": "CognitiveServices",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('customVisionTrainingName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "S0"
      },
      "kind": "CustomVision.Training",
      "properties": {}
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('customVisionPredictionName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "S0"
      },
      "kind": "CustomVision.Prediction",
      "properties": {}
    },
    {
      "apiVersion": "2016-09-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('hostingPlanSku')]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]"
      }
    },
    {
      "apiVersion": "2016-09-01",
      "name": "[variables('linuxHostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "kind": "linux",
      "location": "East US 2",
      "sku": {
        "name": "[parameters('hostingPlanSku')]"
      },
      "properties": {
        "name": "[variables('linuxHostingPlanName')]",
        "reserved": "true"
      }
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('websiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "kind": "app",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "properties": {
        "enabled": true,
        "httpsOnly": true,
        "serverFarmId": "[variables('hostingPlanName')]",
        "siteConfig": {
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "clientAffinityEnabled": false,
          "httpsOnly": true,
          "managedPipelineMode": "Integrated",
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": false,
              "virtualDirectories": null
            },
            {
              "virtualPath": "/api",
              "physicalPath": "site\\wwwroot\\api",
              "preloadEnabled": false,
              "virtualDirectories": null
            }
          ],
          "siteAuthEnabled": false
        }
      },
      "resources": [
        {
          "type": "config",
          "name": "connectionStrings",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('websiteName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName'))]"
          ],
          "properties": {
            "AzureConfigurationStore": {
              "value": "[listkeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName')), '2019-02-01-preview').value[2].connectionString]",
              "type": "Custom"
            }
          }
        },
        {
          "type": "config",
          "name": "appSettings",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('websiteName'))]",
            "[resourceId('Microsoft.Insights/components', variables('insightsName'))]"
          ],
          "properties": {
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('insightsName')), '2015-05-01').InstrumentationKey]",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "disabled",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "DiagnosticServices_EXTENSION_VERSION": "~3",
            "InstrumentationEngine_EXTENSION_VERSION": "~1",
            "XDT_MicrosoftApplicationInsights_BaseExtensions": "disabled",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended"
          }
        }
      ]
    },
    {
      "apiVersion": "2019-04-01",
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "properties": {
        "accessTier": "Hot",
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "resources": [
        {
          "type": "Microsoft.Storage/storageAccounts/blobServices",
          "apiVersion": "2019-04-01",
          "name": "[concat(variables('storageAccountName'), '/default')]",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "cors": {
              "corsRules": [
                {
                  "allowedOrigins": [
                    "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('websiteName'))).hostnames[0])]"
                  ],
                  "allowedMethods": [
                    "PUT",
                    "GET",
                    "HEAD",
                    "MERGE",
                    "POST",
                    "PATCH",
                    "OPTIONS"
                  ],
                  "maxAgeInSeconds": 0,
                  "exposedHeaders": [
                    "*"
                  ],
                  "allowedHeaders": [
                    "*"
                  ]
                }
              ]
            },
            "deleteRetentionPolicy": {
              "enabled": true,
              "days": 2
            }
          }
        },
        {
          "name": "['default/artifacts']",
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('websiteName'))]"
      ]
    },
    {
      "type": "Microsoft.Media/mediaservices",
      "apiVersion": "2018-07-01",
      "name": "[variables('videoIndexerName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageAccounts": [
          {
            "id": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
            "type": "Primary"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]"
      ]
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "clientAffinityEnabled": false,
          "httpsOnly": true,
          "managedPipelineMode": "Integrated",
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly"
        }
      },
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('functionAppName'))]"
          ],
          "properties": {
            "packageUri": "[parameters('functionsPackageUrl')]"
          }
        },
        {
          "name": "default/eventgrid_extension",
          "apiVersion": "2018-11-01",
          "type": "host/systemkeys",
          "properties": {
            "name": "eventgrid_extension",
            "value": "[variables('functionsHostKey')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "MSDeploy",
            "appSettings"
          ]
        },
        {
          "type": "config",
          "name": "appSettings",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Insights/components', variables('insightsName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName'))]",
            "MSDeploy"
          ],
          "properties": {
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsSecretStorageType": "Files",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('insightsName')), '2015-05-01').InstrumentationKey]",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "disabled",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "DiagnosticServices_EXTENSION_VERSION": "~3",
            "InstrumentationEngine_EXTENSION_VERSION": "~1",
            "XDT_MicrosoftApplicationInsights_BaseExtensions": "disabled",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",

            "AzureAppConfigurationStore": "[listkeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName')), '2019-02-01-preview').value[2].connectionString]"
          }
        }
      ]
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('skillsFunctionAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "properties": {
        "name": "[variables('skillsFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "clientAffinityEnabled": false,
          "httpsOnly": true,
          "managedPipelineMode": "Integrated",
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly"
        }
      },
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('skillsFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[parameters('skillsFunctionsPackageUrl')]"
          }
        },
        {
          "type": "config",
          "name": "appSettings",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('skillsFunctionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
            "[resourceId('Microsoft.Insights/components', variables('insightsName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName'))]",
            "MSDeploy"
          ],
          "properties": {
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsSecretStorageType": "Files",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('insightsName')), '2015-05-01').InstrumentationKey]",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "disabled",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "DiagnosticServices_EXTENSION_VERSION": "~3",
            "InstrumentationEngine_EXTENSION_VERSION": "~1",
            "XDT_MicrosoftApplicationInsights_BaseExtensions": "disabled",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",

            "AzureAppConfigurationStore": "[listkeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName')), '2019-02-01-preview').value[2].connectionString]"
          }
        }
      ]
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('aiModelFunctionAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp,linux",
      "location": "East US 2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('linuxHostingPlanName'))]"
      ],
      "properties": {
        "name": "[variables('aiModelFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('linuxHostingPlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOCKER|mcr.microsoft.com/azure-functions/python:2.0-python3.6-appservice",
          "requestTracingEnabled": true,
          "requestTracingExpirationTime": "9999-12-31T23:59:00Z",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": true,
          "clientAffinityEnabled": false,
          "httpsOnly": true,
          "managedPipelineMode": "Integrated",
          "http20Enabled": true,
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly"
        }
      },
      "resources": [
        {
          "type": "config",
          "name": "appSettings",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('aiModelFunctionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
            "[resourceId('Microsoft.Insights/components', variables('insightsName'))]",
            "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigurationName'))]"
          ],
          "properties": {
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "FUNCTIONS_WORKER_RUNTIME": "python",
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
            "AzureWebJobsSecretStorageType": "Files",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('insightsName')), '2015-05-01').InstrumentationKey]",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "disabled",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "DiagnosticServices_EXTENSION_VERSION": "~3",
            "InstrumentationEngine_EXTENSION_VERSION": "~1",
            "XDT_MicrosoftApplicationInsights_BaseExtensions": "disabled",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",

            "AzureStorageConnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.EventGrid/domains",
      "apiVersion": "2019-02-01-preview",
      "name": "[variables('eventGridDomainName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "inputSchema": "EventGridSchema"
      },
      "resources": [
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/artifacts')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/blobstorage')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/datasets')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/importbatches')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/invitations')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/portfolioartifacts')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/portfolios')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/serviceaccounts')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/teams')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        },
        {
          "type": "Microsoft.EventGrid/domains/topics",
          "apiVersion": "2019-06-01",
          "name": "[concat(variables('eventGridDomainName'), '/users')]",
          "dependsOn": [
            "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]"
          ]
        }
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/invitations', '/Microsoft.EventGrid/', variables('invitationExpirationFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('invitationExpirationFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.Invitations.DomainEvents.Sent"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'invitations')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/invitations', '/Microsoft.EventGrid/', variables('stopInvitationExpirationFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('stopInvitationExpirationFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.Invitations.DomainEvents.Cancelled",
            "Ida.Core.Domain.Invitations.DomainEvents.Completed"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'invitations')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/users', '/Microsoft.EventGrid/', variables('completeInvitationFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('completeInvitationFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.Users.DomainEvents.Registered"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'users')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/datasets', '/Microsoft.EventGrid/', variables('startDatasetDeleteFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startDatasetDeleteFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.Datasets.DomainEvents.Deleted"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'datasets')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startPreprocessFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startPreprocessFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.ProcessingBegan"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startIndexerFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startIndexerFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.ReindexingBegan",
            "Ida.Core.Domain.ImportBatches.DomainEvents.IndexingBegan"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startIndexDeleteFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startIndexDeleteFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.Deleted"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startBlobDeleteFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startBlobDeleteFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.Reindexed"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startImportBatchRemoveFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startImportBatchRemoveFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.BlobDeleted"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('datasetDeleteImportBatchFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('datasetDeleteImportBatchFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.Removed"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startCopyFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startCopyFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.CopyingBegan"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "name": "[concat(variables('eventGridDomainName'), '/importbatches', '/Microsoft.EventGrid/', variables('startVideoProcessingFunction').name)]",
      "type": "Microsoft.EventGrid/domains/topics/providers/eventSubscriptions",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-06-01",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "endpointUrl": "[concat(variables('startVideoProcessingFunction').url, variables('functionsHostKey'))]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Ida.Core.Domain.ImportBatches.DomainEvents.ProcessingVideoBegan"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName'))]",
        "[resourceId('Microsoft.EventGrid/domains/topics', variables('eventGridDomainName'), 'importbatches')]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/host/systemkeys', variables('functionAppName'), 'default', 'eventgrid_extension')]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('o365ConnectorName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', 'office365')]"
        },
        "displayName": "default"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('eventgridConnection')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', 'azureeventgrid')]"
        },
        "displayName": "default"
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('sqlConnectorName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', 'sql')]"
        },
        "displayName": "default",
        "parameterValues": {
          "server": "[concat(variables('sqlServerName'), 'database.windows.net')]",
          "database": "[variables('databaseName')]",
          "username": "[parameters('sqlAdministratorLogin')]",
          "password": "[parameters('sqlAdministratorLoginPassword')]"
        }
      }
    }
  ],
  "outputs": {
    "websiteUrl": {
      "type": "string",
      "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('websiteName'))).hostnames[0])]"
    },
    "apiBaseUrl": {
      "type": "string",
      "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('websiteName'))).hostnames[0], '/api')]"
    },
    "Website Kudu URL": {
      "type": "string",
      "value": "[concat('https://', variables('websiteName'), '.scm.azurewebsites.net')]"
    },
    "Website Kudu Username": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('websiteName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingUserName]"
    },
    "Website Kudu Password": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('websiteName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingPassword]"
    },
    "aiFunctionsBaseUrl": {
      "type": "string",
      "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('aiModelFunctionAppName'))).hostnames[0])]"
    },
    "AI Functions Kudu URL": {
      "type": "string",
      "value": "[concat('https://', variables('aiModelFunctionAppName'), '.scm.azurewebsites.net')]"
    },
    "AI Functions Kudu Username": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('aiModelFunctionAppName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingUserName]"
    },
    "AI Functions Kudu Password": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('aiModelFunctionAppName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingPassword]"
    },
    "azureMapsSubscriptionKey": {
      "type": "string",
      "value": "[listkeys(resourceId('Microsoft.Maps/accounts', variables('mapsName')), '2018-05-01').primaryKey]"
    },
    "computerVisionApiKey": {
      "type": "string",
      "value": "[listkeys(resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveServicesAccountName')), '2017-04-18').key1]"
    },
    "computerVisionEndpoint": {
      "type": "string",
      "value": "[reference(concat('Microsoft.CognitiveServices/accounts/', variables('cognitiveServicesAccountName')), '2017-04-18').endpoint]"
    },
    "connectionStrings_azureStorage": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
    },
    "connectionStrings_idaCoreDbContext": {
      "type": "string",
      "value": "[concat('Server=', variables('sqlServerName'), '.database.windows.net; Database=', variables('databaseName'), '; User ID=', parameters('sqlAdministratorLogin'), '; Password=', parameters('sqlAdministratorLoginPassword'), '; Encrypt=True;')]"
    },
    "customVisionPredictionApiKey": {
      "type": "string",
      "value": "[listkeys(resourceId('Microsoft.CognitiveServices/accounts', variables('customVisionPredictionName')), '2017-04-18').key1]"
    },
    "customVisionPredictionEndpoint": {
      "type": "string",
      "value": "[concat(reference(concat('Microsoft.CognitiveServices/accounts/', variables('customVisionPredictionName')), '2017-04-18').endpoint, 'customvision/Prediction/v1.0')]"
    },
    "eventGridHostName": {
      "type": "string",
      "value": "[substring(reference(concat('Microsoft.EventGrid/domains/', variables('eventGridDomainName')), '2019-02-01-preview').endpoint, 8, indexOf(skip(reference(concat('Microsoft.EventGrid/domains/', variables('eventGridDomainName')), '2019-02-01-preview').endpoint, 8), '/'))]"
    },
    "eventGridKey": {
      "type": "string",
      "value": "[listkeys(resourceId('Microsoft.EventGrid/domains', variables('eventGridDomainName')), '2019-02-01-preview').key1]"
    },
    "searchApiKey": {
      "type": "string",
      "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('searchServiceName')), '2015-08-19').primaryKey]"
    },
    "searchServiceName": {
      "type": "string",
      "value": "[variables('searchServiceName')]"
    },
    "skillsetFunctionsUrl": {
      "type": "string",
      "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('skillsFunctionAppName'))).hostnames[0])]"
    },
    "Skillsets Kudu URL": {
      "type": "string",
      "value": "[concat('https://', variables('skillsFunctionAppName'), '.scm.azurewebsites.net')]"
    },
    "Skillsets Kudu Username": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('skillsFunctionAppName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingUserName]"
    },
    "Skillsets Kudu Password": {
      "type": "string",
      "value": "[list(concat('Microsoft.Web/sites/', variables('skillsFunctionAppName'), '/config/publishingcredentials'), '2016-08-01').properties.publishingPassword]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "eventGridDomainName": {
      "type": "string",
      "value": "[variables('eventGridDomainName')]"
    },
    "eventGridConnector": {
      "type": "string",
      "value": "[variables('eventgridConnection')]"
    },
    "sqlConnector": {
      "type": "string",
      "value": "[variables('sqlConnectorName')]"
    },
    "o365Connector": {
      "type": "string",
      "value": "[variables('o365ConnectorName')]"
    }
  }
}